{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Info","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","colr","Date","toDateString","url","fetchData","country","a","changeableurl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","initialDailyData","fetchMyAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","covidImage","alt","Cards","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,mOCuDpJC,EAhDF,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WAElD,OAAIH,EAKA,qBAAKI,UAAYC,IAAOC,UAAxB,SACI,eAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAW,EAAGC,QAAQ,SAAtC,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,UAA/E,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,wBACA,cAACF,EAAA,EAAD,CAAYG,QAAS,KAArB,SACI,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAKxB,EAAUyB,MAAOC,SAAU,IAAKC,UAAU,QAEtE,eAACR,EAAA,EAAD,CAAYS,KAAK,gBAAjB,cAAmC,IAAIC,KAAM1B,GAAY2B,eAAzD,OACA,cAACX,EAAA,EAAD,CAAYG,QAAS,QAArB,2CAIR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOJ,WAA/E,SACI,eAACiB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,yBACA,cAACF,EAAA,EAAD,CAAYG,QAAS,KAArB,SACI,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvB,EAAUwB,MAAOC,SAAU,IAAKC,UAAU,QAEtE,eAACR,EAAA,EAAD,CAAYS,KAAK,gBAAjB,cAAmC,IAAIC,KAAM1B,GAAY2B,eAAzD,OACA,cAACX,EAAA,EAAD,CAAYG,QAAS,QAArB,uDAIR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOH,QAA/E,SACI,eAACgB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,sBACA,cAACF,EAAA,EAAD,CAAYG,QAAS,KAArB,SACI,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAKtB,EAAOuB,MAAOC,SAAU,IAAKC,UAAU,QAEnE,eAACR,EAAA,EAAD,CAAYS,KAAK,gBAAjB,cAAmC,IAAIC,KAAM1B,GAAY2B,eAAzD,OACA,cAACX,EAAA,EAAD,CAAYG,QAAS,QAArB,6DAnCT,c,yBCTTS,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBC,EAAgBJ,EAEjBE,IACCE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJnB,kBAQoDG,IAAMC,IAAIF,GAR9D,2BAQTpC,KAAQC,EARC,EAQDA,UAAWC,EARV,EAQUA,UAAWC,EARrB,EAQqBA,OAAQC,EAR7B,EAQ6BA,WAR7B,kBAUV,CAAEH,YAAWC,YAAWC,SAAQC,eAVtB,kCAajBmC,QAAQC,IAAR,MAbiB,0DAAH,sDAiBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAECE,IAAMC,IAAN,UAAaN,EAAb,WAFD,uBAEdhC,EAFc,EAEdA,KAEF0C,EAAe1C,EAAK2C,KAAI,SAACC,GAAD,MAAgB,CAC1C3C,UAAW2C,EAAU3C,UAAU4C,MAC/B1C,OAAQyC,EAAUzC,OAAO0C,MACzBC,KAAMF,EAAUG,eAPE,kBAUfL,GAVe,gCAYtBH,QAAQC,IAAR,MAZsB,yDAAH,qDAgBdQ,EAAc,uCAAG,8BAAAb,EAAA,+EAGeE,IAAMC,IAAN,UAAaN,EAAb,eAHf,uBAGNiB,EAHM,EAGdjD,KAAQiD,UAHM,kBAKfA,EAAUN,KAAI,SAACT,GAAD,OAAaA,EAAQgB,SALpB,gCAOtBX,QAAQC,IAAR,MAPsB,yDAAH,qD,yBCoCZW,EAnEA,SAAC,GAAyD,IAAD,IAAtDnD,KAAQC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAU+B,EAAc,EAAdA,QAAc,EAClCkB,mBAAS,IADyB,mBAC7DR,EAD6D,KAClDS,EADkD,KAGpEC,qBAAU,YACU,uCAAG,4BAAAnB,EAAA,sEACcM,IADd,OACXc,EADW,OAGjBF,EAAaE,GAHI,2CAAH,qDAMhBC,KACC,IAEL,IAAMC,EACHb,EAAU,GAET,cAAC,OAAD,CACI5C,KAAO,CACH0D,OAAQd,EAAUD,KAAI,qBAAEG,QACxBa,SAAU,CAAC,CACP3D,KAAM4C,EAAUD,KAAI,qBAAE1C,aACtB2D,MAAO,WACPC,YAAa,UACbC,MAAM,GACP,CACC9D,KAAM4C,EAAUD,KAAI,qBAAExC,UACtByD,MAAO,SACPC,YAAa,MACbE,gBAAiB,wBACjBD,MAAM,OAGZ,KAGVvB,QAAQC,IAAIvC,EAAWC,EAAWC,GAClC,IAAM6D,EACF/D,EAEI,cAAC,MAAD,CACID,KAAM,CACF0D,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CAAC,CACPC,MAAO,SACPG,gBAAiB,CACb,uBACA,uBACA,wBAEJ/D,KAAK,CAACC,EAAUyB,MAAOxB,EAAUwB,MAAOvB,EAAOuB,UAGvDuC,QAAS,CACLC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAqBnC,OAGvD,KAGV,OACI,qBAAK7B,UAAWC,IAAOC,UAAvB,SACI2B,EAAU8B,EAAWP,K,mCCxClBa,EArBO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACCnB,mBAAS,IADV,mBACxCoB,EADwC,KACtBC,EADsB,KAW/C,OARAnB,qBAAU,YACO,uCAAG,sBAAAnB,EAAA,kEACZsC,EADY,SACczB,IADd,6EAAH,qDAId0B,KACA,CAACD,IAGA,cAACE,EAAA,EAAD,CAAatE,UAAaC,IAAOsE,YAAjC,SACI,eAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOT,EAAoBS,EAAEC,OAAOvD,QAA5E,UACI,wBAAQA,MAAM,GAAd,sBACC8C,EAAiB7B,KAAI,SAACT,EAASgD,GAAV,OAAgB,yBAAgBxD,MAAOQ,EAAvB,cAAkCA,EAAlC,MAAagD,Y,iBCtBpD,MAA0B,kCCuC1BC,E,4MA9BXC,MAAQ,CACJpF,KAAM,GACNkC,QAAS,I,EAQbqC,oB,uCAAsB,WAAOrC,GAAP,eAAAC,EAAA,sEACQF,EAAUC,GADlB,OACZmD,EADY,OAElB,EAAKC,SAAS,CAAEtF,KAAMqF,EAAanD,QAASA,IAF1B,2C,wPAJQD,I,OAApBoD,E,OACNE,KAAKD,SAAS,CAAEtF,KAAMqF,I,qIAShB,IAAD,EACqBE,KAAKH,MAAvBpF,EADH,EACGA,KAAMkC,EADT,EACSA,QAEd,OACI,sBAAK7B,UAAYC,IAAOC,UAAxB,UACI,qBAAKF,UAAWC,IAAOkF,MAAOC,IAAKC,EAAYC,IAAI,aACnD,cAACC,EAAD,CAAO5F,KAAOA,IACd,cAAC,EAAD,CAAeuE,oBAAuBgB,KAAKhB,sBAC3C,cAAC,EAAD,CAAQvE,KAAOA,EAAMkC,QAAWA,W,GAzB9B2D,IAAMC,WCHxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U,mBCJjDrG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,4B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,sC","file":"static/js/main.fd04c9f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2YkB0\",\"card\":\"Cards_card__BIcST\",\"infected\":\"Cards_infected__4AQeq\",\"recovered\":\"Cards_recovered__29sPa\",\"deaths\":\"Cards_deaths__3MqRQ\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport Countup from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\n\r\nconst Info = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n   \r\n    if(!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n\r\n    return (\r\n        <div className= {styles.container}>\r\n            <Grid container spacing = {3} justify=\"center\">\r\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Infected </Typography>\r\n                        <Typography variant= \"h5\">\r\n                            <Countup start={0} end={confirmed.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography colr=\"textSecondary\"> {new Date (lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant= \"body2\"> Number of active cases </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Recovered </Typography>\r\n                        <Typography variant= \"h5\"> \r\n                            <Countup start={0} end={recovered.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography colr=\"textSecondary\"> {new Date (lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant= \"body2\"> Number of recoveries from COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Deaths </Typography>\r\n                        <Typography variant= \"h5\"> \r\n                            <Countup start={0} end={deaths.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography colr=\"textSecondary\"> {new Date (lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant= \"body2\"> Number of deaths caused by COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableurl = url;\r\n\r\n    if(country) {\r\n        changeableurl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableurl);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate, \r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        \r\n        const { data: { countries }} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);   \r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchMyAPI = async () => {\r\n          const initialDailyData = await fetchDailyData();\r\n    \r\n          setDailyData(initialDailyData);\r\n        };\r\n    \r\n        fetchMyAPI();\r\n      }, []);\r\n\r\n    const lineChart = (\r\n       dailyData[0] \r\n       ? (\r\n        <Line \r\n            data= {{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0 , 0, 0.5)',\r\n                    fill: true,\r\n                }],\r\n            }}\r\n        />) : null\r\n    );\r\n\r\n    console.log(confirmed, recovered, deaths);\r\n    const barChart = (\r\n        confirmed \r\n        ? (\r\n            <Bar \r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)', \r\n                        ],\r\n                        data:[confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text:`Current state in ${country}`},\r\n                }}\r\n            />\r\n        )   : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n           {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts;","import React, { useState, useEffect } from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ( {handleCountryChange} ) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n       const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n       }\r\n\r\n       fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className = {styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\"> Global </option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}> {country} </option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\r\nimport { Cards, Charts, CountryPicker } from './components';\r\nimport { fetchData } from './api/';\r\n\r\nimport styles from './App.module.css';\r\nimport covidImage from './images/image.png';\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: {}, \r\n        country: '',\r\n    }\r\n\r\n   async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data: fetchedData });\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({ data: fetchedData, country: country });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n\r\n        return (\r\n            <div className= {styles.container} >\r\n                <img className={styles.image} src={covidImage} alt=\"COVID-19\" />\r\n                <Cards data= {data} />\r\n                <CountryPicker handleCountryChange = {this.handleCountryChange}/>  \r\n                <Charts data= {data} country = {country} /> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App; \r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__ZwTdX\",\"image\":\"App_image__1dhVY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1oCjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3ZqbC\"};"],"sourceRoot":""}